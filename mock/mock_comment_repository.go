// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/comment_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/loak155/techbranch-backend/internal/domain"
)

// MockICommentRepository is a mock of ICommentRepository interface.
type MockICommentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockICommentRepositoryMockRecorder
}

// MockICommentRepositoryMockRecorder is the mock recorder for MockICommentRepository.
type MockICommentRepositoryMockRecorder struct {
	mock *MockICommentRepository
}

// NewMockICommentRepository creates a new mock instance.
func NewMockICommentRepository(ctrl *gomock.Controller) *MockICommentRepository {
	mock := &MockICommentRepository{ctrl: ctrl}
	mock.recorder = &MockICommentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICommentRepository) EXPECT() *MockICommentRepositoryMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *MockICommentRepository) CreateComment(comment *domain.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockICommentRepositoryMockRecorder) CreateComment(comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockICommentRepository)(nil).CreateComment), comment)
}

// DeleteComment mocks base method.
func (m *MockICommentRepository) DeleteComment(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockICommentRepositoryMockRecorder) DeleteComment(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockICommentRepository)(nil).DeleteComment), id)
}

// DeleteCommentByArticleID mocks base method.
func (m *MockICommentRepository) DeleteCommentByArticleID(ArticleID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCommentByArticleID", ArticleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCommentByArticleID indicates an expected call of DeleteCommentByArticleID.
func (mr *MockICommentRepositoryMockRecorder) DeleteCommentByArticleID(ArticleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommentByArticleID", reflect.TypeOf((*MockICommentRepository)(nil).DeleteCommentByArticleID), ArticleID)
}

// DeleteCommentByUserID mocks base method.
func (m *MockICommentRepository) DeleteCommentByUserID(UserID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCommentByUserID", UserID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCommentByUserID indicates an expected call of DeleteCommentByUserID.
func (mr *MockICommentRepositoryMockRecorder) DeleteCommentByUserID(UserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommentByUserID", reflect.TypeOf((*MockICommentRepository)(nil).DeleteCommentByUserID), UserID)
}

// DeleteCommentByUserIDAndArticleID mocks base method.
func (m *MockICommentRepository) DeleteCommentByUserIDAndArticleID(userID, articleID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCommentByUserIDAndArticleID", userID, articleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCommentByUserIDAndArticleID indicates an expected call of DeleteCommentByUserIDAndArticleID.
func (mr *MockICommentRepositoryMockRecorder) DeleteCommentByUserIDAndArticleID(userID, articleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommentByUserIDAndArticleID", reflect.TypeOf((*MockICommentRepository)(nil).DeleteCommentByUserIDAndArticleID), userID, articleID)
}

// ListCommentsByArticleID mocks base method.
func (m *MockICommentRepository) ListCommentsByArticleID(articleID int) (*[]domain.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommentsByArticleID", articleID)
	ret0, _ := ret[0].(*[]domain.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCommentsByArticleID indicates an expected call of ListCommentsByArticleID.
func (mr *MockICommentRepositoryMockRecorder) ListCommentsByArticleID(articleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommentsByArticleID", reflect.TypeOf((*MockICommentRepository)(nil).ListCommentsByArticleID), articleID)
}

// ListCommentsByUserID mocks base method.
func (m *MockICommentRepository) ListCommentsByUserID(userID int) (*[]domain.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommentsByUserID", userID)
	ret0, _ := ret[0].(*[]domain.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCommentsByUserID indicates an expected call of ListCommentsByUserID.
func (mr *MockICommentRepositoryMockRecorder) ListCommentsByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommentsByUserID", reflect.TypeOf((*MockICommentRepository)(nil).ListCommentsByUserID), userID)
}
