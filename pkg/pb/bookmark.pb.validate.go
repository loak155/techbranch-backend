// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: bookmark.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Bookmark with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Bookmark) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Bookmark with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BookmarkMultiError, or nil
// if none found.
func (m *Bookmark) ValidateAll() error {
	return m.validate(true)
}

func (m *Bookmark) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for ArticleId

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookmarkValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookmarkValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookmarkValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookmarkValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookmarkValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookmarkValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BookmarkMultiError(errors)
	}

	return nil
}

// BookmarkMultiError is an error wrapping multiple validation errors returned
// by Bookmark.ValidateAll() if the designated constraints aren't met.
type BookmarkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BookmarkMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BookmarkMultiError) AllErrors() []error { return m }

// BookmarkValidationError is the validation error returned by
// Bookmark.Validate if the designated constraints aren't met.
type BookmarkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BookmarkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BookmarkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BookmarkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BookmarkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BookmarkValidationError) ErrorName() string { return "BookmarkValidationError" }

// Error satisfies the builtin error interface
func (e BookmarkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBookmark.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BookmarkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BookmarkValidationError{}

// Validate checks the field values on CreateBookmarkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBookmarkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBookmarkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBookmarkRequestMultiError, or nil if none found.
func (m *CreateBookmarkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBookmarkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for ArticleId

	if len(errors) > 0 {
		return CreateBookmarkRequestMultiError(errors)
	}

	return nil
}

// CreateBookmarkRequestMultiError is an error wrapping multiple validation
// errors returned by CreateBookmarkRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateBookmarkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBookmarkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBookmarkRequestMultiError) AllErrors() []error { return m }

// CreateBookmarkRequestValidationError is the validation error returned by
// CreateBookmarkRequest.Validate if the designated constraints aren't met.
type CreateBookmarkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBookmarkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBookmarkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBookmarkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBookmarkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBookmarkRequestValidationError) ErrorName() string {
	return "CreateBookmarkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBookmarkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBookmarkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBookmarkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBookmarkRequestValidationError{}

// Validate checks the field values on CreateBookmarkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBookmarkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBookmarkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBookmarkResponseMultiError, or nil if none found.
func (m *CreateBookmarkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBookmarkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBookmark()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBookmarkResponseValidationError{
					field:  "Bookmark",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBookmarkResponseValidationError{
					field:  "Bookmark",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBookmark()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBookmarkResponseValidationError{
				field:  "Bookmark",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateBookmarkResponseMultiError(errors)
	}

	return nil
}

// CreateBookmarkResponseMultiError is an error wrapping multiple validation
// errors returned by CreateBookmarkResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateBookmarkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBookmarkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBookmarkResponseMultiError) AllErrors() []error { return m }

// CreateBookmarkResponseValidationError is the validation error returned by
// CreateBookmarkResponse.Validate if the designated constraints aren't met.
type CreateBookmarkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBookmarkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBookmarkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBookmarkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBookmarkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBookmarkResponseValidationError) ErrorName() string {
	return "CreateBookmarkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBookmarkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBookmarkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBookmarkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBookmarkResponseValidationError{}

// Validate checks the field values on GetBookmarkCountByArticleIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetBookmarkCountByArticleIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBookmarkCountByArticleIDRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetBookmarkCountByArticleIDRequestMultiError, or nil if none found.
func (m *GetBookmarkCountByArticleIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBookmarkCountByArticleIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ArticleId

	if len(errors) > 0 {
		return GetBookmarkCountByArticleIDRequestMultiError(errors)
	}

	return nil
}

// GetBookmarkCountByArticleIDRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetBookmarkCountByArticleIDRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBookmarkCountByArticleIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBookmarkCountByArticleIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBookmarkCountByArticleIDRequestMultiError) AllErrors() []error { return m }

// GetBookmarkCountByArticleIDRequestValidationError is the validation error
// returned by GetBookmarkCountByArticleIDRequest.Validate if the designated
// constraints aren't met.
type GetBookmarkCountByArticleIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBookmarkCountByArticleIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBookmarkCountByArticleIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBookmarkCountByArticleIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBookmarkCountByArticleIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBookmarkCountByArticleIDRequestValidationError) ErrorName() string {
	return "GetBookmarkCountByArticleIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBookmarkCountByArticleIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBookmarkCountByArticleIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBookmarkCountByArticleIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBookmarkCountByArticleIDRequestValidationError{}

// Validate checks the field values on GetBookmarkCountByArticleIDResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetBookmarkCountByArticleIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBookmarkCountByArticleIDResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetBookmarkCountByArticleIDResponseMultiError, or nil if none found.
func (m *GetBookmarkCountByArticleIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBookmarkCountByArticleIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	if len(errors) > 0 {
		return GetBookmarkCountByArticleIDResponseMultiError(errors)
	}

	return nil
}

// GetBookmarkCountByArticleIDResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetBookmarkCountByArticleIDResponse.ValidateAll() if the designated
// constraints aren't met.
type GetBookmarkCountByArticleIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBookmarkCountByArticleIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBookmarkCountByArticleIDResponseMultiError) AllErrors() []error { return m }

// GetBookmarkCountByArticleIDResponseValidationError is the validation error
// returned by GetBookmarkCountByArticleIDResponse.Validate if the designated
// constraints aren't met.
type GetBookmarkCountByArticleIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBookmarkCountByArticleIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBookmarkCountByArticleIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBookmarkCountByArticleIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBookmarkCountByArticleIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBookmarkCountByArticleIDResponseValidationError) ErrorName() string {
	return "GetBookmarkCountByArticleIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBookmarkCountByArticleIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBookmarkCountByArticleIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBookmarkCountByArticleIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBookmarkCountByArticleIDResponseValidationError{}

// Validate checks the field values on ListBookmarksByUserIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBookmarksByUserIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBookmarksByUserIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBookmarksByUserIDRequestMultiError, or nil if none found.
func (m *ListBookmarksByUserIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBookmarksByUserIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return ListBookmarksByUserIDRequestMultiError(errors)
	}

	return nil
}

// ListBookmarksByUserIDRequestMultiError is an error wrapping multiple
// validation errors returned by ListBookmarksByUserIDRequest.ValidateAll() if
// the designated constraints aren't met.
type ListBookmarksByUserIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBookmarksByUserIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBookmarksByUserIDRequestMultiError) AllErrors() []error { return m }

// ListBookmarksByUserIDRequestValidationError is the validation error returned
// by ListBookmarksByUserIDRequest.Validate if the designated constraints
// aren't met.
type ListBookmarksByUserIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBookmarksByUserIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBookmarksByUserIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBookmarksByUserIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBookmarksByUserIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBookmarksByUserIDRequestValidationError) ErrorName() string {
	return "ListBookmarksByUserIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBookmarksByUserIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBookmarksByUserIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBookmarksByUserIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBookmarksByUserIDRequestValidationError{}

// Validate checks the field values on ListBookmarksByUserIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBookmarksByUserIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBookmarksByUserIDResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListBookmarksByUserIDResponseMultiError, or nil if none found.
func (m *ListBookmarksByUserIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBookmarksByUserIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBookmarks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBookmarksByUserIDResponseValidationError{
						field:  fmt.Sprintf("Bookmarks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBookmarksByUserIDResponseValidationError{
						field:  fmt.Sprintf("Bookmarks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBookmarksByUserIDResponseValidationError{
					field:  fmt.Sprintf("Bookmarks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListBookmarksByUserIDResponseMultiError(errors)
	}

	return nil
}

// ListBookmarksByUserIDResponseMultiError is an error wrapping multiple
// validation errors returned by ListBookmarksByUserIDResponse.ValidateAll()
// if the designated constraints aren't met.
type ListBookmarksByUserIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBookmarksByUserIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBookmarksByUserIDResponseMultiError) AllErrors() []error { return m }

// ListBookmarksByUserIDResponseValidationError is the validation error
// returned by ListBookmarksByUserIDResponse.Validate if the designated
// constraints aren't met.
type ListBookmarksByUserIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBookmarksByUserIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBookmarksByUserIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBookmarksByUserIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBookmarksByUserIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBookmarksByUserIDResponseValidationError) ErrorName() string {
	return "ListBookmarksByUserIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBookmarksByUserIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBookmarksByUserIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBookmarksByUserIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBookmarksByUserIDResponseValidationError{}

// Validate checks the field values on ListBookmarksByArticleIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBookmarksByArticleIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBookmarksByArticleIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListBookmarksByArticleIDRequestMultiError, or nil if none found.
func (m *ListBookmarksByArticleIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBookmarksByArticleIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ArticleId

	if len(errors) > 0 {
		return ListBookmarksByArticleIDRequestMultiError(errors)
	}

	return nil
}

// ListBookmarksByArticleIDRequestMultiError is an error wrapping multiple
// validation errors returned by ListBookmarksByArticleIDRequest.ValidateAll()
// if the designated constraints aren't met.
type ListBookmarksByArticleIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBookmarksByArticleIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBookmarksByArticleIDRequestMultiError) AllErrors() []error { return m }

// ListBookmarksByArticleIDRequestValidationError is the validation error
// returned by ListBookmarksByArticleIDRequest.Validate if the designated
// constraints aren't met.
type ListBookmarksByArticleIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBookmarksByArticleIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBookmarksByArticleIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBookmarksByArticleIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBookmarksByArticleIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBookmarksByArticleIDRequestValidationError) ErrorName() string {
	return "ListBookmarksByArticleIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBookmarksByArticleIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBookmarksByArticleIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBookmarksByArticleIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBookmarksByArticleIDRequestValidationError{}

// Validate checks the field values on ListBookmarksByArticleIDResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListBookmarksByArticleIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBookmarksByArticleIDResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListBookmarksByArticleIDResponseMultiError, or nil if none found.
func (m *ListBookmarksByArticleIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBookmarksByArticleIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBookmarks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBookmarksByArticleIDResponseValidationError{
						field:  fmt.Sprintf("Bookmarks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBookmarksByArticleIDResponseValidationError{
						field:  fmt.Sprintf("Bookmarks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBookmarksByArticleIDResponseValidationError{
					field:  fmt.Sprintf("Bookmarks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListBookmarksByArticleIDResponseMultiError(errors)
	}

	return nil
}

// ListBookmarksByArticleIDResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListBookmarksByArticleIDResponse.ValidateAll() if the designated
// constraints aren't met.
type ListBookmarksByArticleIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBookmarksByArticleIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBookmarksByArticleIDResponseMultiError) AllErrors() []error { return m }

// ListBookmarksByArticleIDResponseValidationError is the validation error
// returned by ListBookmarksByArticleIDResponse.Validate if the designated
// constraints aren't met.
type ListBookmarksByArticleIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBookmarksByArticleIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBookmarksByArticleIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBookmarksByArticleIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBookmarksByArticleIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBookmarksByArticleIDResponseValidationError) ErrorName() string {
	return "ListBookmarksByArticleIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBookmarksByArticleIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBookmarksByArticleIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBookmarksByArticleIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBookmarksByArticleIDResponseValidationError{}

// Validate checks the field values on
// DeleteBookmarkByUserIDAndArticleIDRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteBookmarkByUserIDAndArticleIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DeleteBookmarkByUserIDAndArticleIDRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// DeleteBookmarkByUserIDAndArticleIDRequestMultiError, or nil if none found.
func (m *DeleteBookmarkByUserIDAndArticleIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBookmarkByUserIDAndArticleIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for ArticleId

	if len(errors) > 0 {
		return DeleteBookmarkByUserIDAndArticleIDRequestMultiError(errors)
	}

	return nil
}

// DeleteBookmarkByUserIDAndArticleIDRequestMultiError is an error wrapping
// multiple validation errors returned by
// DeleteBookmarkByUserIDAndArticleIDRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteBookmarkByUserIDAndArticleIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBookmarkByUserIDAndArticleIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBookmarkByUserIDAndArticleIDRequestMultiError) AllErrors() []error { return m }

// DeleteBookmarkByUserIDAndArticleIDRequestValidationError is the validation
// error returned by DeleteBookmarkByUserIDAndArticleIDRequest.Validate if the
// designated constraints aren't met.
type DeleteBookmarkByUserIDAndArticleIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBookmarkByUserIDAndArticleIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBookmarkByUserIDAndArticleIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBookmarkByUserIDAndArticleIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBookmarkByUserIDAndArticleIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBookmarkByUserIDAndArticleIDRequestValidationError) ErrorName() string {
	return "DeleteBookmarkByUserIDAndArticleIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBookmarkByUserIDAndArticleIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBookmarkByUserIDAndArticleIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBookmarkByUserIDAndArticleIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBookmarkByUserIDAndArticleIDRequestValidationError{}

// Validate checks the field values on
// DeleteBookmarkByUserIDAndArticleIDResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteBookmarkByUserIDAndArticleIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DeleteBookmarkByUserIDAndArticleIDResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// DeleteBookmarkByUserIDAndArticleIDResponseMultiError, or nil if none found.
func (m *DeleteBookmarkByUserIDAndArticleIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBookmarkByUserIDAndArticleIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteBookmarkByUserIDAndArticleIDResponseMultiError(errors)
	}

	return nil
}

// DeleteBookmarkByUserIDAndArticleIDResponseMultiError is an error wrapping
// multiple validation errors returned by
// DeleteBookmarkByUserIDAndArticleIDResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteBookmarkByUserIDAndArticleIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBookmarkByUserIDAndArticleIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBookmarkByUserIDAndArticleIDResponseMultiError) AllErrors() []error { return m }

// DeleteBookmarkByUserIDAndArticleIDResponseValidationError is the validation
// error returned by DeleteBookmarkByUserIDAndArticleIDResponse.Validate if
// the designated constraints aren't met.
type DeleteBookmarkByUserIDAndArticleIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBookmarkByUserIDAndArticleIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBookmarkByUserIDAndArticleIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBookmarkByUserIDAndArticleIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBookmarkByUserIDAndArticleIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBookmarkByUserIDAndArticleIDResponseValidationError) ErrorName() string {
	return "DeleteBookmarkByUserIDAndArticleIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBookmarkByUserIDAndArticleIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBookmarkByUserIDAndArticleIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBookmarkByUserIDAndArticleIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBookmarkByUserIDAndArticleIDResponseValidationError{}

// Validate checks the field values on DeleteBookmarkByUserIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBookmarkByUserIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBookmarkByUserIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteBookmarkByUserIDRequestMultiError, or nil if none found.
func (m *DeleteBookmarkByUserIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBookmarkByUserIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return DeleteBookmarkByUserIDRequestMultiError(errors)
	}

	return nil
}

// DeleteBookmarkByUserIDRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteBookmarkByUserIDRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteBookmarkByUserIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBookmarkByUserIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBookmarkByUserIDRequestMultiError) AllErrors() []error { return m }

// DeleteBookmarkByUserIDRequestValidationError is the validation error
// returned by DeleteBookmarkByUserIDRequest.Validate if the designated
// constraints aren't met.
type DeleteBookmarkByUserIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBookmarkByUserIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBookmarkByUserIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBookmarkByUserIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBookmarkByUserIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBookmarkByUserIDRequestValidationError) ErrorName() string {
	return "DeleteBookmarkByUserIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBookmarkByUserIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBookmarkByUserIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBookmarkByUserIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBookmarkByUserIDRequestValidationError{}

// Validate checks the field values on DeleteBookmarkByUserIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBookmarkByUserIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBookmarkByUserIDResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteBookmarkByUserIDResponseMultiError, or nil if none found.
func (m *DeleteBookmarkByUserIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBookmarkByUserIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteBookmarkByUserIDResponseMultiError(errors)
	}

	return nil
}

// DeleteBookmarkByUserIDResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteBookmarkByUserIDResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteBookmarkByUserIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBookmarkByUserIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBookmarkByUserIDResponseMultiError) AllErrors() []error { return m }

// DeleteBookmarkByUserIDResponseValidationError is the validation error
// returned by DeleteBookmarkByUserIDResponse.Validate if the designated
// constraints aren't met.
type DeleteBookmarkByUserIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBookmarkByUserIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBookmarkByUserIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBookmarkByUserIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBookmarkByUserIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBookmarkByUserIDResponseValidationError) ErrorName() string {
	return "DeleteBookmarkByUserIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBookmarkByUserIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBookmarkByUserIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBookmarkByUserIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBookmarkByUserIDResponseValidationError{}

// Validate checks the field values on DeleteBookmarkByArticleIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteBookmarkByArticleIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBookmarkByArticleIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteBookmarkByArticleIDRequestMultiError, or nil if none found.
func (m *DeleteBookmarkByArticleIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBookmarkByArticleIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ArticleId

	if len(errors) > 0 {
		return DeleteBookmarkByArticleIDRequestMultiError(errors)
	}

	return nil
}

// DeleteBookmarkByArticleIDRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteBookmarkByArticleIDRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteBookmarkByArticleIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBookmarkByArticleIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBookmarkByArticleIDRequestMultiError) AllErrors() []error { return m }

// DeleteBookmarkByArticleIDRequestValidationError is the validation error
// returned by DeleteBookmarkByArticleIDRequest.Validate if the designated
// constraints aren't met.
type DeleteBookmarkByArticleIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBookmarkByArticleIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBookmarkByArticleIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBookmarkByArticleIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBookmarkByArticleIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBookmarkByArticleIDRequestValidationError) ErrorName() string {
	return "DeleteBookmarkByArticleIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBookmarkByArticleIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBookmarkByArticleIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBookmarkByArticleIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBookmarkByArticleIDRequestValidationError{}

// Validate checks the field values on DeleteBookmarkByArticleIDResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteBookmarkByArticleIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBookmarkByArticleIDResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteBookmarkByArticleIDResponseMultiError, or nil if none found.
func (m *DeleteBookmarkByArticleIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBookmarkByArticleIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteBookmarkByArticleIDResponseMultiError(errors)
	}

	return nil
}

// DeleteBookmarkByArticleIDResponseMultiError is an error wrapping multiple
// validation errors returned by
// DeleteBookmarkByArticleIDResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteBookmarkByArticleIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBookmarkByArticleIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBookmarkByArticleIDResponseMultiError) AllErrors() []error { return m }

// DeleteBookmarkByArticleIDResponseValidationError is the validation error
// returned by DeleteBookmarkByArticleIDResponse.Validate if the designated
// constraints aren't met.
type DeleteBookmarkByArticleIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBookmarkByArticleIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBookmarkByArticleIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBookmarkByArticleIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBookmarkByArticleIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBookmarkByArticleIDResponseValidationError) ErrorName() string {
	return "DeleteBookmarkByArticleIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBookmarkByArticleIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBookmarkByArticleIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBookmarkByArticleIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBookmarkByArticleIDResponseValidationError{}
