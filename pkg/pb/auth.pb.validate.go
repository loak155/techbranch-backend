// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: auth.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PreSignupRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PreSignupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PreSignupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PreSignupRequestMultiError, or nil if none found.
func (m *PreSignupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PreSignupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUsername()); l < 1 || l > 20 {
		err := PreSignupRequestValidationError{
			field:  "Username",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = PreSignupRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 8 || l > 30 {
		err := PreSignupRequestValidationError{
			field:  "Password",
			reason: "value length must be between 8 and 30 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PreSignupRequestMultiError(errors)
	}

	return nil
}

func (m *PreSignupRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *PreSignupRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// PreSignupRequestMultiError is an error wrapping multiple validation errors
// returned by PreSignupRequest.ValidateAll() if the designated constraints
// aren't met.
type PreSignupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PreSignupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PreSignupRequestMultiError) AllErrors() []error { return m }

// PreSignupRequestValidationError is the validation error returned by
// PreSignupRequest.Validate if the designated constraints aren't met.
type PreSignupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PreSignupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PreSignupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PreSignupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PreSignupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PreSignupRequestValidationError) ErrorName() string { return "PreSignupRequestValidationError" }

// Error satisfies the builtin error interface
func (e PreSignupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPreSignupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PreSignupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PreSignupRequestValidationError{}

// Validate checks the field values on PreSignupResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PreSignupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PreSignupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PreSignupResponseMultiError, or nil if none found.
func (m *PreSignupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PreSignupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PreSignupResponseMultiError(errors)
	}

	return nil
}

// PreSignupResponseMultiError is an error wrapping multiple validation errors
// returned by PreSignupResponse.ValidateAll() if the designated constraints
// aren't met.
type PreSignupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PreSignupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PreSignupResponseMultiError) AllErrors() []error { return m }

// PreSignupResponseValidationError is the validation error returned by
// PreSignupResponse.Validate if the designated constraints aren't met.
type PreSignupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PreSignupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PreSignupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PreSignupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PreSignupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PreSignupResponseValidationError) ErrorName() string {
	return "PreSignupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PreSignupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPreSignupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PreSignupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PreSignupResponseValidationError{}

// Validate checks the field values on SignupRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SignupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignupRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SignupRequestMultiError, or
// nil if none found.
func (m *SignupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SignupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return SignupRequestMultiError(errors)
	}

	return nil
}

// SignupRequestMultiError is an error wrapping multiple validation errors
// returned by SignupRequest.ValidateAll() if the designated constraints
// aren't met.
type SignupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignupRequestMultiError) AllErrors() []error { return m }

// SignupRequestValidationError is the validation error returned by
// SignupRequest.Validate if the designated constraints aren't met.
type SignupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignupRequestValidationError) ErrorName() string { return "SignupRequestValidationError" }

// Error satisfies the builtin error interface
func (e SignupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignupRequestValidationError{}

// Validate checks the field values on SignupResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SignupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignupResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SignupResponseMultiError,
// or nil if none found.
func (m *SignupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SignupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SignupResponseMultiError(errors)
	}

	return nil
}

// SignupResponseMultiError is an error wrapping multiple validation errors
// returned by SignupResponse.ValidateAll() if the designated constraints
// aren't met.
type SignupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignupResponseMultiError) AllErrors() []error { return m }

// SignupResponseValidationError is the validation error returned by
// SignupResponse.Validate if the designated constraints aren't met.
type SignupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignupResponseValidationError) ErrorName() string { return "SignupResponseValidationError" }

// Error satisfies the builtin error interface
func (e SignupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignupResponseValidationError{}

// Validate checks the field values on SigninRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SigninRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SigninRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SigninRequestMultiError, or
// nil if none found.
func (m *SigninRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SigninRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = SigninRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 8 || l > 30 {
		err := SigninRequestValidationError{
			field:  "Password",
			reason: "value length must be between 8 and 30 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SigninRequestMultiError(errors)
	}

	return nil
}

func (m *SigninRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *SigninRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// SigninRequestMultiError is an error wrapping multiple validation errors
// returned by SigninRequest.ValidateAll() if the designated constraints
// aren't met.
type SigninRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SigninRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SigninRequestMultiError) AllErrors() []error { return m }

// SigninRequestValidationError is the validation error returned by
// SigninRequest.Validate if the designated constraints aren't met.
type SigninRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SigninRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SigninRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SigninRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SigninRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SigninRequestValidationError) ErrorName() string { return "SigninRequestValidationError" }

// Error satisfies the builtin error interface
func (e SigninRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSigninRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SigninRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SigninRequestValidationError{}

// Validate checks the field values on SigninResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SigninResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SigninResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SigninResponseMultiError,
// or nil if none found.
func (m *SigninResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SigninResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for TokenType

	// no validation rules for ExpiresIn

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return SigninResponseMultiError(errors)
	}

	return nil
}

// SigninResponseMultiError is an error wrapping multiple validation errors
// returned by SigninResponse.ValidateAll() if the designated constraints
// aren't met.
type SigninResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SigninResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SigninResponseMultiError) AllErrors() []error { return m }

// SigninResponseValidationError is the validation error returned by
// SigninResponse.Validate if the designated constraints aren't met.
type SigninResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SigninResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SigninResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SigninResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SigninResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SigninResponseValidationError) ErrorName() string { return "SigninResponseValidationError" }

// Error satisfies the builtin error interface
func (e SigninResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSigninResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SigninResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SigninResponseValidationError{}

// Validate checks the field values on SignoutRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SignoutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignoutRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SignoutRequestMultiError,
// or nil if none found.
func (m *SignoutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SignoutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SignoutRequestMultiError(errors)
	}

	return nil
}

// SignoutRequestMultiError is an error wrapping multiple validation errors
// returned by SignoutRequest.ValidateAll() if the designated constraints
// aren't met.
type SignoutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignoutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignoutRequestMultiError) AllErrors() []error { return m }

// SignoutRequestValidationError is the validation error returned by
// SignoutRequest.Validate if the designated constraints aren't met.
type SignoutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignoutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignoutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignoutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignoutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignoutRequestValidationError) ErrorName() string { return "SignoutRequestValidationError" }

// Error satisfies the builtin error interface
func (e SignoutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignoutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignoutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignoutRequestValidationError{}

// Validate checks the field values on SignoutResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SignoutResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignoutResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SignoutResponseMultiError, or nil if none found.
func (m *SignoutResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SignoutResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SignoutResponseMultiError(errors)
	}

	return nil
}

// SignoutResponseMultiError is an error wrapping multiple validation errors
// returned by SignoutResponse.ValidateAll() if the designated constraints
// aren't met.
type SignoutResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignoutResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignoutResponseMultiError) AllErrors() []error { return m }

// SignoutResponseValidationError is the validation error returned by
// SignoutResponse.Validate if the designated constraints aren't met.
type SignoutResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignoutResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignoutResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignoutResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignoutResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignoutResponseValidationError) ErrorName() string { return "SignoutResponseValidationError" }

// Error satisfies the builtin error interface
func (e SignoutResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignoutResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignoutResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignoutResponseValidationError{}

// Validate checks the field values on RefreshTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefreshTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshTokenRequestMultiError, or nil if none found.
func (m *RefreshTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return RefreshTokenRequestMultiError(errors)
	}

	return nil
}

// RefreshTokenRequestMultiError is an error wrapping multiple validation
// errors returned by RefreshTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type RefreshTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshTokenRequestMultiError) AllErrors() []error { return m }

// RefreshTokenRequestValidationError is the validation error returned by
// RefreshTokenRequest.Validate if the designated constraints aren't met.
type RefreshTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshTokenRequestValidationError) ErrorName() string {
	return "RefreshTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshTokenRequestValidationError{}

// Validate checks the field values on RefreshTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefreshTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshTokenResponseMultiError, or nil if none found.
func (m *RefreshTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	if len(errors) > 0 {
		return RefreshTokenResponseMultiError(errors)
	}

	return nil
}

// RefreshTokenResponseMultiError is an error wrapping multiple validation
// errors returned by RefreshTokenResponse.ValidateAll() if the designated
// constraints aren't met.
type RefreshTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshTokenResponseMultiError) AllErrors() []error { return m }

// RefreshTokenResponseValidationError is the validation error returned by
// RefreshTokenResponse.Validate if the designated constraints aren't met.
type RefreshTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshTokenResponseValidationError) ErrorName() string {
	return "RefreshTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshTokenResponseValidationError{}

// Validate checks the field values on GetSigninUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSigninUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSigninUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSigninUserRequestMultiError, or nil if none found.
func (m *GetSigninUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSigninUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetSigninUserRequestMultiError(errors)
	}

	return nil
}

// GetSigninUserRequestMultiError is an error wrapping multiple validation
// errors returned by GetSigninUserRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSigninUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSigninUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSigninUserRequestMultiError) AllErrors() []error { return m }

// GetSigninUserRequestValidationError is the validation error returned by
// GetSigninUserRequest.Validate if the designated constraints aren't met.
type GetSigninUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSigninUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSigninUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSigninUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSigninUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSigninUserRequestValidationError) ErrorName() string {
	return "GetSigninUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSigninUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSigninUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSigninUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSigninUserRequestValidationError{}

// Validate checks the field values on GetSigninUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSigninUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSigninUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSigninUserResponseMultiError, or nil if none found.
func (m *GetSigninUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSigninUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSigninUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSigninUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSigninUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSigninUserResponseMultiError(errors)
	}

	return nil
}

// GetSigninUserResponseMultiError is an error wrapping multiple validation
// errors returned by GetSigninUserResponse.ValidateAll() if the designated
// constraints aren't met.
type GetSigninUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSigninUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSigninUserResponseMultiError) AllErrors() []error { return m }

// GetSigninUserResponseValidationError is the validation error returned by
// GetSigninUserResponse.Validate if the designated constraints aren't met.
type GetSigninUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSigninUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSigninUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSigninUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSigninUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSigninUserResponseValidationError) ErrorName() string {
	return "GetSigninUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSigninUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSigninUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSigninUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSigninUserResponseValidationError{}

// Validate checks the field values on GetGoogleLoginURLRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGoogleLoginURLRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGoogleLoginURLRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGoogleLoginURLRequestMultiError, or nil if none found.
func (m *GetGoogleLoginURLRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGoogleLoginURLRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetGoogleLoginURLRequestMultiError(errors)
	}

	return nil
}

// GetGoogleLoginURLRequestMultiError is an error wrapping multiple validation
// errors returned by GetGoogleLoginURLRequest.ValidateAll() if the designated
// constraints aren't met.
type GetGoogleLoginURLRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGoogleLoginURLRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGoogleLoginURLRequestMultiError) AllErrors() []error { return m }

// GetGoogleLoginURLRequestValidationError is the validation error returned by
// GetGoogleLoginURLRequest.Validate if the designated constraints aren't met.
type GetGoogleLoginURLRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGoogleLoginURLRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGoogleLoginURLRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGoogleLoginURLRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGoogleLoginURLRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGoogleLoginURLRequestValidationError) ErrorName() string {
	return "GetGoogleLoginURLRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGoogleLoginURLRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGoogleLoginURLRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGoogleLoginURLRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGoogleLoginURLRequestValidationError{}

// Validate checks the field values on GetGoogleLoginURLResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGoogleLoginURLResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGoogleLoginURLResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGoogleLoginURLResponseMultiError, or nil if none found.
func (m *GetGoogleLoginURLResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGoogleLoginURLResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if len(errors) > 0 {
		return GetGoogleLoginURLResponseMultiError(errors)
	}

	return nil
}

// GetGoogleLoginURLResponseMultiError is an error wrapping multiple validation
// errors returned by GetGoogleLoginURLResponse.ValidateAll() if the
// designated constraints aren't met.
type GetGoogleLoginURLResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGoogleLoginURLResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGoogleLoginURLResponseMultiError) AllErrors() []error { return m }

// GetGoogleLoginURLResponseValidationError is the validation error returned by
// GetGoogleLoginURLResponse.Validate if the designated constraints aren't met.
type GetGoogleLoginURLResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGoogleLoginURLResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGoogleLoginURLResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGoogleLoginURLResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGoogleLoginURLResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGoogleLoginURLResponseValidationError) ErrorName() string {
	return "GetGoogleLoginURLResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGoogleLoginURLResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGoogleLoginURLResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGoogleLoginURLResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGoogleLoginURLResponseValidationError{}

// Validate checks the field values on GoogleLoginCallbackRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GoogleLoginCallbackRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GoogleLoginCallbackRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GoogleLoginCallbackRequestMultiError, or nil if none found.
func (m *GoogleLoginCallbackRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GoogleLoginCallbackRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for State

	// no validation rules for Code

	if len(errors) > 0 {
		return GoogleLoginCallbackRequestMultiError(errors)
	}

	return nil
}

// GoogleLoginCallbackRequestMultiError is an error wrapping multiple
// validation errors returned by GoogleLoginCallbackRequest.ValidateAll() if
// the designated constraints aren't met.
type GoogleLoginCallbackRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GoogleLoginCallbackRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GoogleLoginCallbackRequestMultiError) AllErrors() []error { return m }

// GoogleLoginCallbackRequestValidationError is the validation error returned
// by GoogleLoginCallbackRequest.Validate if the designated constraints aren't met.
type GoogleLoginCallbackRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GoogleLoginCallbackRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GoogleLoginCallbackRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GoogleLoginCallbackRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GoogleLoginCallbackRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GoogleLoginCallbackRequestValidationError) ErrorName() string {
	return "GoogleLoginCallbackRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GoogleLoginCallbackRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGoogleLoginCallbackRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GoogleLoginCallbackRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GoogleLoginCallbackRequestValidationError{}

// Validate checks the field values on GoogleLoginCallbackResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GoogleLoginCallbackResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GoogleLoginCallbackResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GoogleLoginCallbackResponseMultiError, or nil if none found.
func (m *GoogleLoginCallbackResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GoogleLoginCallbackResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for TokenType

	// no validation rules for ExpiresIn

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return GoogleLoginCallbackResponseMultiError(errors)
	}

	return nil
}

// GoogleLoginCallbackResponseMultiError is an error wrapping multiple
// validation errors returned by GoogleLoginCallbackResponse.ValidateAll() if
// the designated constraints aren't met.
type GoogleLoginCallbackResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GoogleLoginCallbackResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GoogleLoginCallbackResponseMultiError) AllErrors() []error { return m }

// GoogleLoginCallbackResponseValidationError is the validation error returned
// by GoogleLoginCallbackResponse.Validate if the designated constraints
// aren't met.
type GoogleLoginCallbackResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GoogleLoginCallbackResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GoogleLoginCallbackResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GoogleLoginCallbackResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GoogleLoginCallbackResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GoogleLoginCallbackResponseValidationError) ErrorName() string {
	return "GoogleLoginCallbackResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GoogleLoginCallbackResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGoogleLoginCallbackResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GoogleLoginCallbackResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GoogleLoginCallbackResponseValidationError{}
