// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: comment.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Comment with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Comment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Comment with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CommentMultiError, or nil if none found.
func (m *Comment) ValidateAll() error {
	return m.validate(true)
}

func (m *Comment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for ArticleId

	if l := utf8.RuneCountInString(m.GetContent()); l < 1 || l > 1000 {
		err := CommentValidationError{
			field:  "Content",
			reason: "value length must be between 1 and 1000 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommentValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommentValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommentValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommentValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommentValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommentValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CommentMultiError(errors)
	}

	return nil
}

// CommentMultiError is an error wrapping multiple validation errors returned
// by Comment.ValidateAll() if the designated constraints aren't met.
type CommentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentMultiError) AllErrors() []error { return m }

// CommentValidationError is the validation error returned by Comment.Validate
// if the designated constraints aren't met.
type CommentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentValidationError) ErrorName() string { return "CommentValidationError" }

// Error satisfies the builtin error interface
func (e CommentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentValidationError{}

// Validate checks the field values on CreateCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCommentRequestMultiError, or nil if none found.
func (m *CreateCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for ArticleId

	if l := utf8.RuneCountInString(m.GetContent()); l < 1 || l > 1000 {
		err := CreateCommentRequestValidationError{
			field:  "Content",
			reason: "value length must be between 1 and 1000 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateCommentRequestMultiError(errors)
	}

	return nil
}

// CreateCommentRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCommentRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommentRequestMultiError) AllErrors() []error { return m }

// CreateCommentRequestValidationError is the validation error returned by
// CreateCommentRequest.Validate if the designated constraints aren't met.
type CreateCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommentRequestValidationError) ErrorName() string {
	return "CreateCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommentRequestValidationError{}

// Validate checks the field values on CreateCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCommentResponseMultiError, or nil if none found.
func (m *CreateCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCommentResponseValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCommentResponseValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCommentResponseValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCommentResponseMultiError(errors)
	}

	return nil
}

// CreateCommentResponseMultiError is an error wrapping multiple validation
// errors returned by CreateCommentResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommentResponseMultiError) AllErrors() []error { return m }

// CreateCommentResponseValidationError is the validation error returned by
// CreateCommentResponse.Validate if the designated constraints aren't met.
type CreateCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommentResponseValidationError) ErrorName() string {
	return "CreateCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommentResponseValidationError{}

// Validate checks the field values on ListCommentsByUserIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCommentsByUserIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCommentsByUserIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCommentsByUserIDRequestMultiError, or nil if none found.
func (m *ListCommentsByUserIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCommentsByUserIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return ListCommentsByUserIDRequestMultiError(errors)
	}

	return nil
}

// ListCommentsByUserIDRequestMultiError is an error wrapping multiple
// validation errors returned by ListCommentsByUserIDRequest.ValidateAll() if
// the designated constraints aren't met.
type ListCommentsByUserIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCommentsByUserIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCommentsByUserIDRequestMultiError) AllErrors() []error { return m }

// ListCommentsByUserIDRequestValidationError is the validation error returned
// by ListCommentsByUserIDRequest.Validate if the designated constraints
// aren't met.
type ListCommentsByUserIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCommentsByUserIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCommentsByUserIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCommentsByUserIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCommentsByUserIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCommentsByUserIDRequestValidationError) ErrorName() string {
	return "ListCommentsByUserIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCommentsByUserIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCommentsByUserIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCommentsByUserIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCommentsByUserIDRequestValidationError{}

// Validate checks the field values on ListCommentsByUserIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCommentsByUserIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCommentsByUserIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCommentsByUserIDResponseMultiError, or nil if none found.
func (m *ListCommentsByUserIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCommentsByUserIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetComments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCommentsByUserIDResponseValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCommentsByUserIDResponseValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCommentsByUserIDResponseValidationError{
					field:  fmt.Sprintf("Comments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCommentsByUserIDResponseMultiError(errors)
	}

	return nil
}

// ListCommentsByUserIDResponseMultiError is an error wrapping multiple
// validation errors returned by ListCommentsByUserIDResponse.ValidateAll() if
// the designated constraints aren't met.
type ListCommentsByUserIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCommentsByUserIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCommentsByUserIDResponseMultiError) AllErrors() []error { return m }

// ListCommentsByUserIDResponseValidationError is the validation error returned
// by ListCommentsByUserIDResponse.Validate if the designated constraints
// aren't met.
type ListCommentsByUserIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCommentsByUserIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCommentsByUserIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCommentsByUserIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCommentsByUserIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCommentsByUserIDResponseValidationError) ErrorName() string {
	return "ListCommentsByUserIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCommentsByUserIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCommentsByUserIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCommentsByUserIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCommentsByUserIDResponseValidationError{}

// Validate checks the field values on ListCommentsByArticleIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCommentsByArticleIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCommentsByArticleIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListCommentsByArticleIDRequestMultiError, or nil if none found.
func (m *ListCommentsByArticleIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCommentsByArticleIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ArticleId

	if len(errors) > 0 {
		return ListCommentsByArticleIDRequestMultiError(errors)
	}

	return nil
}

// ListCommentsByArticleIDRequestMultiError is an error wrapping multiple
// validation errors returned by ListCommentsByArticleIDRequest.ValidateAll()
// if the designated constraints aren't met.
type ListCommentsByArticleIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCommentsByArticleIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCommentsByArticleIDRequestMultiError) AllErrors() []error { return m }

// ListCommentsByArticleIDRequestValidationError is the validation error
// returned by ListCommentsByArticleIDRequest.Validate if the designated
// constraints aren't met.
type ListCommentsByArticleIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCommentsByArticleIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCommentsByArticleIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCommentsByArticleIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCommentsByArticleIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCommentsByArticleIDRequestValidationError) ErrorName() string {
	return "ListCommentsByArticleIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCommentsByArticleIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCommentsByArticleIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCommentsByArticleIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCommentsByArticleIDRequestValidationError{}

// Validate checks the field values on ListCommentsByArticleIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCommentsByArticleIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCommentsByArticleIDResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListCommentsByArticleIDResponseMultiError, or nil if none found.
func (m *ListCommentsByArticleIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCommentsByArticleIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetComments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCommentsByArticleIDResponseValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCommentsByArticleIDResponseValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCommentsByArticleIDResponseValidationError{
					field:  fmt.Sprintf("Comments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCommentsByArticleIDResponseMultiError(errors)
	}

	return nil
}

// ListCommentsByArticleIDResponseMultiError is an error wrapping multiple
// validation errors returned by ListCommentsByArticleIDResponse.ValidateAll()
// if the designated constraints aren't met.
type ListCommentsByArticleIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCommentsByArticleIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCommentsByArticleIDResponseMultiError) AllErrors() []error { return m }

// ListCommentsByArticleIDResponseValidationError is the validation error
// returned by ListCommentsByArticleIDResponse.Validate if the designated
// constraints aren't met.
type ListCommentsByArticleIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCommentsByArticleIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCommentsByArticleIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCommentsByArticleIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCommentsByArticleIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCommentsByArticleIDResponseValidationError) ErrorName() string {
	return "ListCommentsByArticleIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCommentsByArticleIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCommentsByArticleIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCommentsByArticleIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCommentsByArticleIDResponseValidationError{}

// Validate checks the field values on DeleteCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCommentRequestMultiError, or nil if none found.
func (m *DeleteCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteCommentRequestMultiError(errors)
	}

	return nil
}

// DeleteCommentRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCommentRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCommentRequestMultiError) AllErrors() []error { return m }

// DeleteCommentRequestValidationError is the validation error returned by
// DeleteCommentRequest.Validate if the designated constraints aren't met.
type DeleteCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCommentRequestValidationError) ErrorName() string {
	return "DeleteCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCommentRequestValidationError{}

// Validate checks the field values on DeleteCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCommentResponseMultiError, or nil if none found.
func (m *DeleteCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteCommentResponseMultiError(errors)
	}

	return nil
}

// DeleteCommentResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteCommentResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCommentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCommentResponseMultiError) AllErrors() []error { return m }

// DeleteCommentResponseValidationError is the validation error returned by
// DeleteCommentResponse.Validate if the designated constraints aren't met.
type DeleteCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCommentResponseValidationError) ErrorName() string {
	return "DeleteCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCommentResponseValidationError{}

// Validate checks the field values on DeleteCommentByUserIDAndArticleIDRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DeleteCommentByUserIDAndArticleIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DeleteCommentByUserIDAndArticleIDRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// DeleteCommentByUserIDAndArticleIDRequestMultiError, or nil if none found.
func (m *DeleteCommentByUserIDAndArticleIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCommentByUserIDAndArticleIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for ArticleId

	if len(errors) > 0 {
		return DeleteCommentByUserIDAndArticleIDRequestMultiError(errors)
	}

	return nil
}

// DeleteCommentByUserIDAndArticleIDRequestMultiError is an error wrapping
// multiple validation errors returned by
// DeleteCommentByUserIDAndArticleIDRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCommentByUserIDAndArticleIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCommentByUserIDAndArticleIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCommentByUserIDAndArticleIDRequestMultiError) AllErrors() []error { return m }

// DeleteCommentByUserIDAndArticleIDRequestValidationError is the validation
// error returned by DeleteCommentByUserIDAndArticleIDRequest.Validate if the
// designated constraints aren't met.
type DeleteCommentByUserIDAndArticleIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCommentByUserIDAndArticleIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCommentByUserIDAndArticleIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCommentByUserIDAndArticleIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCommentByUserIDAndArticleIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCommentByUserIDAndArticleIDRequestValidationError) ErrorName() string {
	return "DeleteCommentByUserIDAndArticleIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCommentByUserIDAndArticleIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCommentByUserIDAndArticleIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCommentByUserIDAndArticleIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCommentByUserIDAndArticleIDRequestValidationError{}

// Validate checks the field values on
// DeleteCommentByUserIDAndArticleIDResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteCommentByUserIDAndArticleIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DeleteCommentByUserIDAndArticleIDResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// DeleteCommentByUserIDAndArticleIDResponseMultiError, or nil if none found.
func (m *DeleteCommentByUserIDAndArticleIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCommentByUserIDAndArticleIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteCommentByUserIDAndArticleIDResponseMultiError(errors)
	}

	return nil
}

// DeleteCommentByUserIDAndArticleIDResponseMultiError is an error wrapping
// multiple validation errors returned by
// DeleteCommentByUserIDAndArticleIDResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteCommentByUserIDAndArticleIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCommentByUserIDAndArticleIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCommentByUserIDAndArticleIDResponseMultiError) AllErrors() []error { return m }

// DeleteCommentByUserIDAndArticleIDResponseValidationError is the validation
// error returned by DeleteCommentByUserIDAndArticleIDResponse.Validate if the
// designated constraints aren't met.
type DeleteCommentByUserIDAndArticleIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCommentByUserIDAndArticleIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCommentByUserIDAndArticleIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCommentByUserIDAndArticleIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCommentByUserIDAndArticleIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCommentByUserIDAndArticleIDResponseValidationError) ErrorName() string {
	return "DeleteCommentByUserIDAndArticleIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCommentByUserIDAndArticleIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCommentByUserIDAndArticleIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCommentByUserIDAndArticleIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCommentByUserIDAndArticleIDResponseValidationError{}

// Validate checks the field values on DeleteCommentByUserIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCommentByUserIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCommentByUserIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCommentByUserIDRequestMultiError, or nil if none found.
func (m *DeleteCommentByUserIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCommentByUserIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return DeleteCommentByUserIDRequestMultiError(errors)
	}

	return nil
}

// DeleteCommentByUserIDRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteCommentByUserIDRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteCommentByUserIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCommentByUserIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCommentByUserIDRequestMultiError) AllErrors() []error { return m }

// DeleteCommentByUserIDRequestValidationError is the validation error returned
// by DeleteCommentByUserIDRequest.Validate if the designated constraints
// aren't met.
type DeleteCommentByUserIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCommentByUserIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCommentByUserIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCommentByUserIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCommentByUserIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCommentByUserIDRequestValidationError) ErrorName() string {
	return "DeleteCommentByUserIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCommentByUserIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCommentByUserIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCommentByUserIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCommentByUserIDRequestValidationError{}

// Validate checks the field values on DeleteCommentByUserIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCommentByUserIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCommentByUserIDResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteCommentByUserIDResponseMultiError, or nil if none found.
func (m *DeleteCommentByUserIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCommentByUserIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteCommentByUserIDResponseMultiError(errors)
	}

	return nil
}

// DeleteCommentByUserIDResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteCommentByUserIDResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteCommentByUserIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCommentByUserIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCommentByUserIDResponseMultiError) AllErrors() []error { return m }

// DeleteCommentByUserIDResponseValidationError is the validation error
// returned by DeleteCommentByUserIDResponse.Validate if the designated
// constraints aren't met.
type DeleteCommentByUserIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCommentByUserIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCommentByUserIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCommentByUserIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCommentByUserIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCommentByUserIDResponseValidationError) ErrorName() string {
	return "DeleteCommentByUserIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCommentByUserIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCommentByUserIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCommentByUserIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCommentByUserIDResponseValidationError{}

// Validate checks the field values on DeleteCommentByArticleIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCommentByArticleIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCommentByArticleIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteCommentByArticleIDRequestMultiError, or nil if none found.
func (m *DeleteCommentByArticleIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCommentByArticleIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ArticleId

	if len(errors) > 0 {
		return DeleteCommentByArticleIDRequestMultiError(errors)
	}

	return nil
}

// DeleteCommentByArticleIDRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteCommentByArticleIDRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteCommentByArticleIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCommentByArticleIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCommentByArticleIDRequestMultiError) AllErrors() []error { return m }

// DeleteCommentByArticleIDRequestValidationError is the validation error
// returned by DeleteCommentByArticleIDRequest.Validate if the designated
// constraints aren't met.
type DeleteCommentByArticleIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCommentByArticleIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCommentByArticleIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCommentByArticleIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCommentByArticleIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCommentByArticleIDRequestValidationError) ErrorName() string {
	return "DeleteCommentByArticleIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCommentByArticleIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCommentByArticleIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCommentByArticleIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCommentByArticleIDRequestValidationError{}

// Validate checks the field values on DeleteCommentByArticleIDResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteCommentByArticleIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCommentByArticleIDResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteCommentByArticleIDResponseMultiError, or nil if none found.
func (m *DeleteCommentByArticleIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCommentByArticleIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteCommentByArticleIDResponseMultiError(errors)
	}

	return nil
}

// DeleteCommentByArticleIDResponseMultiError is an error wrapping multiple
// validation errors returned by
// DeleteCommentByArticleIDResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteCommentByArticleIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCommentByArticleIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCommentByArticleIDResponseMultiError) AllErrors() []error { return m }

// DeleteCommentByArticleIDResponseValidationError is the validation error
// returned by DeleteCommentByArticleIDResponse.Validate if the designated
// constraints aren't met.
type DeleteCommentByArticleIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCommentByArticleIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCommentByArticleIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCommentByArticleIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCommentByArticleIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCommentByArticleIDResponseValidationError) ErrorName() string {
	return "DeleteCommentByArticleIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCommentByArticleIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCommentByArticleIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCommentByArticleIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCommentByArticleIDResponseValidationError{}
