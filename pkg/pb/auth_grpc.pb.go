// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: auth.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthService_PreSignup_FullMethodName           = "/proto.AuthService/PreSignup"
	AuthService_Signup_FullMethodName              = "/proto.AuthService/Signup"
	AuthService_Signin_FullMethodName              = "/proto.AuthService/Signin"
	AuthService_Signout_FullMethodName             = "/proto.AuthService/Signout"
	AuthService_RefreshToken_FullMethodName        = "/proto.AuthService/RefreshToken"
	AuthService_GetSigninUser_FullMethodName       = "/proto.AuthService/GetSigninUser"
	AuthService_GetGoogleLoginURL_FullMethodName   = "/proto.AuthService/GetGoogleLoginURL"
	AuthService_GoogleLoginCallback_FullMethodName = "/proto.AuthService/GoogleLoginCallback"
)

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	PreSignup(ctx context.Context, in *PreSignupRequest, opts ...grpc.CallOption) (*PreSignupResponse, error)
	Signup(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption) (*SignupResponse, error)
	Signin(ctx context.Context, in *SigninRequest, opts ...grpc.CallOption) (*SigninResponse, error)
	Signout(ctx context.Context, in *SignoutRequest, opts ...grpc.CallOption) (*SignoutResponse, error)
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error)
	GetSigninUser(ctx context.Context, in *GetSigninUserRequest, opts ...grpc.CallOption) (*GetSigninUserResponse, error)
	GetGoogleLoginURL(ctx context.Context, in *GetGoogleLoginURLRequest, opts ...grpc.CallOption) (*GetGoogleLoginURLResponse, error)
	GoogleLoginCallback(ctx context.Context, in *GoogleLoginCallbackRequest, opts ...grpc.CallOption) (*GoogleLoginCallbackResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) PreSignup(ctx context.Context, in *PreSignupRequest, opts ...grpc.CallOption) (*PreSignupResponse, error) {
	out := new(PreSignupResponse)
	err := c.cc.Invoke(ctx, AuthService_PreSignup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Signup(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption) (*SignupResponse, error) {
	out := new(SignupResponse)
	err := c.cc.Invoke(ctx, AuthService_Signup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Signin(ctx context.Context, in *SigninRequest, opts ...grpc.CallOption) (*SigninResponse, error) {
	out := new(SigninResponse)
	err := c.cc.Invoke(ctx, AuthService_Signin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Signout(ctx context.Context, in *SignoutRequest, opts ...grpc.CallOption) (*SignoutResponse, error) {
	out := new(SignoutResponse)
	err := c.cc.Invoke(ctx, AuthService_Signout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error) {
	out := new(RefreshTokenResponse)
	err := c.cc.Invoke(ctx, AuthService_RefreshToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetSigninUser(ctx context.Context, in *GetSigninUserRequest, opts ...grpc.CallOption) (*GetSigninUserResponse, error) {
	out := new(GetSigninUserResponse)
	err := c.cc.Invoke(ctx, AuthService_GetSigninUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetGoogleLoginURL(ctx context.Context, in *GetGoogleLoginURLRequest, opts ...grpc.CallOption) (*GetGoogleLoginURLResponse, error) {
	out := new(GetGoogleLoginURLResponse)
	err := c.cc.Invoke(ctx, AuthService_GetGoogleLoginURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GoogleLoginCallback(ctx context.Context, in *GoogleLoginCallbackRequest, opts ...grpc.CallOption) (*GoogleLoginCallbackResponse, error) {
	out := new(GoogleLoginCallbackResponse)
	err := c.cc.Invoke(ctx, AuthService_GoogleLoginCallback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility
type AuthServiceServer interface {
	PreSignup(context.Context, *PreSignupRequest) (*PreSignupResponse, error)
	Signup(context.Context, *SignupRequest) (*SignupResponse, error)
	Signin(context.Context, *SigninRequest) (*SigninResponse, error)
	Signout(context.Context, *SignoutRequest) (*SignoutResponse, error)
	RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error)
	GetSigninUser(context.Context, *GetSigninUserRequest) (*GetSigninUserResponse, error)
	GetGoogleLoginURL(context.Context, *GetGoogleLoginURLRequest) (*GetGoogleLoginURLResponse, error)
	GoogleLoginCallback(context.Context, *GoogleLoginCallbackRequest) (*GoogleLoginCallbackResponse, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (UnimplementedAuthServiceServer) PreSignup(context.Context, *PreSignupRequest) (*PreSignupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreSignup not implemented")
}
func (UnimplementedAuthServiceServer) Signup(context.Context, *SignupRequest) (*SignupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Signup not implemented")
}
func (UnimplementedAuthServiceServer) Signin(context.Context, *SigninRequest) (*SigninResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Signin not implemented")
}
func (UnimplementedAuthServiceServer) Signout(context.Context, *SignoutRequest) (*SignoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Signout not implemented")
}
func (UnimplementedAuthServiceServer) RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedAuthServiceServer) GetSigninUser(context.Context, *GetSigninUserRequest) (*GetSigninUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSigninUser not implemented")
}
func (UnimplementedAuthServiceServer) GetGoogleLoginURL(context.Context, *GetGoogleLoginURLRequest) (*GetGoogleLoginURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoogleLoginURL not implemented")
}
func (UnimplementedAuthServiceServer) GoogleLoginCallback(context.Context, *GoogleLoginCallbackRequest) (*GoogleLoginCallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoogleLoginCallback not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_PreSignup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreSignupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).PreSignup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_PreSignup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).PreSignup(ctx, req.(*PreSignupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Signup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Signup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_Signup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Signup(ctx, req.(*SignupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Signin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SigninRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Signin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_Signin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Signin(ctx, req.(*SigninRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Signout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Signout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_Signout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Signout(ctx, req.(*SignoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetSigninUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSigninUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetSigninUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetSigninUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetSigninUser(ctx, req.(*GetSigninUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetGoogleLoginURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoogleLoginURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetGoogleLoginURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetGoogleLoginURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetGoogleLoginURL(ctx, req.(*GetGoogleLoginURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GoogleLoginCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoogleLoginCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GoogleLoginCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GoogleLoginCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GoogleLoginCallback(ctx, req.(*GoogleLoginCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PreSignup",
			Handler:    _AuthService_PreSignup_Handler,
		},
		{
			MethodName: "Signup",
			Handler:    _AuthService_Signup_Handler,
		},
		{
			MethodName: "Signin",
			Handler:    _AuthService_Signin_Handler,
		},
		{
			MethodName: "Signout",
			Handler:    _AuthService_Signout_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _AuthService_RefreshToken_Handler,
		},
		{
			MethodName: "GetSigninUser",
			Handler:    _AuthService_GetSigninUser_Handler,
		},
		{
			MethodName: "GetGoogleLoginURL",
			Handler:    _AuthService_GetGoogleLoginURL_Handler,
		},
		{
			MethodName: "GoogleLoginCallback",
			Handler:    _AuthService_GoogleLoginCallback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
